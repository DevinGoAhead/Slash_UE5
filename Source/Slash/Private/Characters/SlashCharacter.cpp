// Fill out your copyright notice in the Description page of Project Settings.

#include "Characters/SlashCharacter.h"
#include "Slash/Public/Items/Item.h"
#include "Slash/Public/Items/Weapons/Weapon.h"

#include "GameFramework/SpringArmComponent.h"
#include "Camera/CameraComponent.h"
#include "GameFramework/CharacterMovementComponent.h"
#include "GroomComponent.h"
#include "Components/BoxComponent.h"

#include "Animation/AnimMontage.h"

// Sets default values
ASlashCharacter::ASlashCharacter() {
	PrimaryActorTick.bCanEverTick = true;

	bUseControllerRotationPitch = false;
	bUseControllerRotationYaw = false;
	bUseControllerRotationRoll = false;

	GetCharacterMovement()->bOrientRotationToMovement = true;
	GetCharacterMovement()->RotationRate = FRotator(0.f, 360.f, 0.f);

	auto CharactorRootComponent = GetRootComponent();

	SpringArm = CreateDefaultSubobject<USpringArmComponent>(TEXT("SpringArm"));
	SpringArm->TargetArmLength = 200.f;
	SpringArm->SetupAttachment(CharactorRootComponent);

	CameraView = CreateDefaultSubobject<UCameraComponent>(TEXT("CameraView"));
	CameraView->SetupAttachment(SpringArm);

	//添加毛发组件到 mesh 上
	Hair = CreateDefaultSubobject<UGroomComponent>(TEXT("Hair"));
	Hair->SetupAttachment(GetMesh());
	Hair->AttachmentName = FString("head"); // 绑定插槽

	Eyebrow = CreateDefaultSubobject<UGroomComponent>(TEXT("Eyebrow"));
	Eyebrow->SetupAttachment(GetMesh());
	Hair->AttachmentName = FString("head"); // 绑定插槽
}

void ASlashCharacter::BeginPlay() {
	Super::BeginPlay();
	// 用于判定 Enemy::OnPawnSee 看到的是玩家而不是其它 Enemy
	// 原始方案是每一次都将看到的角色 CastToSlashCharacter, 根据转换结果判断是否是SlashCharacter, 这样将更消耗资源
	Tags.Add(FName("EngageableTarget"));
}

// 将武器挂载到 SpineSocket
void ASlashCharacter::Disarm() {
	if (EquippedWeapon) {
		EquippedWeapon->AttachToComponentSnap(GetMesh(), FName("SpineSocket"));
	}
}

// 将武器挂载到 RightHandSocket
void ASlashCharacter::Arm() {
	if (EquippedWeapon) {
		EquippedWeapon->AttachToComponentSnap(GetMesh(), FName("RightHandSocket"));
	}
}

void ASlashCharacter::MoveForward(float Value) {
	// 相机的 forward 向量 会随着控制器旋转, 这个旋转可能会导致 forward 向下向上倾斜, 而我们只希望获得 XZ 平面的分量
	// 相机的的旋转与 Controller 是一致的, 而我们需要的forward XZ 平面的分量本质就是 Controller 旋转矩阵中受 Yaw 影响的部分
	// 可以理解为XZ 平面的一个单位向量, 累计转动 Yaw 之后的方向, 即 (cos(Yaw), sin(Yaw), 0.f)
	// Direction = (cos(Yaw), sin(Yaw), 0.f) // Yaw 要转为弧度
	// 示例代码中使用了一种更稳妥的方式而已
	if (ActionState == EActionStates::EAS_Unoccupied && Controller && Value) {
		const FRotator ControlRotation = GetControlRotation(); // 控制器的欧拉角结构体
		const FRotator YawRotation = FRotator(0.f, ControlRotation.Yaw, 0.f);//基于 Yaw 构造旋转矩阵
		const FVector ForwardDirection = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);
		AddMovementInput(ForwardDirection, Value);
	}
}

void ASlashCharacter::MoveRight(float Value) {
	// 本质是 Direction = (cos(Yaw + π / 2), sin(Yaw +  π / 2), 0.f) // Yaw 要转为弧度
	if (ActionState == EActionStates::EAS_Unoccupied && Controller && Value) {
		const FRotator ControlRotation = GetControlRotation(); // 控制器的欧拉角结构体
		const FRotator YawRotation = FRotator(0.f, ControlRotation.Yaw, 0.f);//基于 Yaw 构造旋转矩阵
		const FVector RightDirection = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::Y);
		AddMovementInput(RightDirection, Value);
	}
}

void ASlashCharacter::Turn(float Value) {
	if (Controller && Value) {
		AddControllerYawInput(Value);
	}
}

void ASlashCharacter::LookUp(float Value) {
	if (Controller && Value) {
		AddControllerPitchInput(Value);
	}
}

void ASlashCharacter::EKeyPressed() {
	if (OverlappingItem) {
		EquippedWeapon = Cast<AWeapon>(OverlappingItem);
		if (EquippedWeapon) {
			// 第 2 个 this 为 InInstigator, 不同于EventInstigator
			EquippedWeapon->EquipWeapon(GetMesh(), FName("RightHandSocket"), this, this);
			CharacterState = ECharacterStates::ECS_EquippedOneHandedWeapon;
			OverlappingItem = nullptr;
		}
	}
	
	// 空闲状态 且 设置了有效的 Montage, 允许装卸武器
	else if (EquippedWeapon && ActionState == EActionStates::EAS_Unoccupied && EquipMontage){
		if (CharacterState != ECharacterStates::ECS_UnEquiped) { //此时处于装备武器状态, 即允许执行卸载武器动作
			ActionState = EActionStates::EAS_Equipping;
			PlayMontage(FName("Disarm"), EquipMontage);
			CharacterState = ECharacterStates::ECS_UnEquiped; // 卸载武器后设置为未装备状态
			
		}
		else if (CharacterState == ECharacterStates::ECS_UnEquiped) {
			ActionState = EActionStates::EAS_Equipping;
			PlayMontage(FName("Arm"), EquipMontage);
			CharacterState = ECharacterStates::ECS_EquippedOneHandedWeapon; // 装备武器后设置为装备状态
		}
	}
}

void ASlashCharacter::Attack() {
	Super::Attack();
	if (CharacterState != ECharacterStates::ECS_UnEquiped 
			&& ActionState == EActionStates::EAS_Unoccupied 
			&& AttackMontage) {
		ActionState = EActionStates::EAS_Attacking;
		PlayMontage(RandomMontageSection("Attack_", AttackMontage), AttackMontage);
	}
}

void ASlashCharacter::AttackEnd() {
	ActionState = EActionStates::EAS_Unoccupied;
}

void ASlashCharacter::Die() {
	Super::Die();
}

void ASlashCharacter::Tick(float DeltaTime) {
	Super::Tick(DeltaTime);
}

void ASlashCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent) {
	Super::SetupPlayerInputComponent(PlayerInputComponent);

	PlayerInputComponent->BindAxis(TEXT("MoveForward"), this, &ASlashCharacter::MoveForward);
	PlayerInputComponent->BindAxis(TEXT("Turn"), this, &ASlashCharacter::Turn);
	PlayerInputComponent->BindAxis(TEXT("LookUp"), this, &ASlashCharacter::LookUp);
	PlayerInputComponent->BindAxis(TEXT("MoveRight"), this, &ASlashCharacter::MoveRight);

	// 这里没有定义 ASlashCharacter::Jump, 直接调用父类的 Jump
	PlayerInputComponent->BindAction(FName("Jump"), IE_Pressed, this, &ACharacter::Jump);
	PlayerInputComponent->BindAction(FName("EKeyPressed"), IE_Pressed, this, &ASlashCharacter::EKeyPressed);
	PlayerInputComponent->BindAction(FName("Attack"), IE_Pressed, this, &ASlashCharacter::Attack);
}

float ASlashCharacter::TakeDamage(float DamageAmount, const struct FDamageEvent& DamageEvent,
	AController* EventInstigator, AActor* DamageCauser) {
	Super::TakeDamage(DamageAmount, DamageEvent, EventInstigator, DamageCauser);
	return DamageAmount;
}

void ASlashCharacter::GetHited_Implementation(const FVector& Impactpoint, AActor* Hitter) {
	Super::GetHited_Implementation(Impactpoint, Hitter);
	ResetAttackState();
}
